---

- include: ../../playbooks/installation/uninstall_packages.yml

- include: ../../playbooks/installation/quagga_install.yml


- hosts: leaf:spine
  become: true
  ignore_errors: yes
  tasks:
    - shell: dpkg --list | grep kernel
      register: kernel_version

    - debug:
        var: kernel_version.stdout_lines


- hosts: server_emulator
  become: true

  tasks:
    - command: "date +%Y%m%d%T"
      register: start_time

    - set_fact:
        hash_name: "docker_quagga_ospf_traffic_{{ start_time.stdout }}"
        start_time: "{{ start_time.stdout }}"


- hosts: leaf:spine
  become: true
  tasks:
    - name: Pull quagga container image from dockerhub
      command: "docker pull stigt/debian-quagga:latest"

    - name: Install docker compose
      shell: "curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose"

    - name: Make docker-compose file executable
      shell: "chmod +x /usr/local/bin/docker-compose"

    - file:
        path: "{{ docker_compose_file }}"
        state: touch

    - name: Create docker-compose file
      lineinfile:
        path: "{{ docker_compose_file }}"
        line: "{{ item }}"
      with_items:
      - "version: '3'"
      - "services:"

    - name: Add docker_move.sh
      copy:
        src: ../../templates/docker_move.sh
        dest: "~/docker_move.sh"      
        owner: root
        group: root
        mode: 0755


- hosts: spine[0]
  become: true

  vars:
  - containers: ['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        state: 'up'
      with_items:
      - "{{ containers }}"


- hosts: spine[1]
  become: true

  vars:
  - containers: ['R9', 'R10', 'R11', 'R12', 'R13', 'R14', 'R15', 'R16']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        state: 'up'
      with_items:
      - "{{ containers }}"


- hosts: leaf[0]
  become: true

  vars:
  - containers: ['R17', 'R18', 'R19', 'R20', 'R21', 'R22', 'R23', 'R24']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        state: 'up'
      with_items:
      - "{{ containers }}"


- hosts: leaf[1]
  become: true

  vars:
  - containers: ['R25', 'R26', 'R27', 'R28', 'R29', 'R30', 'R31', 'R32']

  tasks:
    - file:
        path: "~/volumes/quagga/{{ item }}"
        state: directory
      with_items:
      - "{{ containers }}"

    - name: Copy ospfd.conf and zebra.conf in respective containers
      include: copy_config_files.yml container={{ item }} ospfd_conf_file='ospfd.conf.j2' zebra_conf_file='zebra.conf.j2'
      with_items:
      - "{{ containers }}"

    - name: Add container info in docker-compose file
      include: update_docker_compose.yml container={{ item }}
      with_items:
      - "{{ containers }}"

    - name: Run docker-compose up
      shell: "docker-compose up -d"
      args:
        chdir: ~/
      ignore_errors: yes

    - name: Bring up all containers
      docker_updown:
        config_file: "{{ lookup('file', '../../group_vars/{{ inventory_hostname }}/{{ item }}') }}"
        state: 'up'
      with_items:
      - "{{ containers }}"


- hosts: spine[0]
  become: true
  ignore_errors: yes

  vars:
  - container: R1
  - containers: ['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8']

  tasks:
    - file:
        path: "{{ docker_log_dir }}"
        state: directory

    - include_vars:
        file: ../../group_vars/{{ inventory_hostname }}/{{ container }}

    - name: Verify quagga ospf traffic inside R1 container
      test_docker_ospf:
        switch_name: "{{ inventory_hostname }}"     
        container: "{{ container }}"
        config_file: "{{ lookup('template', '../../templates/ospfd.conf.j2') }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ docker_log_dir }}"
      register: module_out

    - command: "date +%Y%m%d%T"
      register: end_time

    - name: Fetch the log file
      slurp:
        src: "{{ module_out.log_file_path }}"
      register: logs

    - name: Store the test result in a hash in redis db on server emulator
      store_result_in_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        start_time: "{{ hostvars['server_emulator']['start_time'] }}"
        end_time: "{{ end_time.stdout }}"
        hash_dict: "{{ module_out.hash_dict }}"
        log_content: "{{ logs['content'] | b64decode }}"
      delegate_to: 127.0.0.1


- hosts: leaf:spine
  become: true
  ignore_errors: yes
  tasks:
    - include: ../../playbooks/get_goes_version_and_tags.yml


- include: quagga_ospf_traffic_reset.yml
  when: reset_config


- hosts: server_emulator
  become: true
  tasks:
    - name: Get the test result from redis db
      get_test_result_from_redis:
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
      register: result

    - name: Print test case result
      debug:
        msg: "Test case result: {{ result.result_status }}"

    - name: Print failure summary
      debug:
        msg: "Failure summary: {{ result.result_detail }}"

    - lineinfile:
        path: "{{ regression_summary_report }}"
        line: "{{ hash_name }}: {{ result.result_status }}"


- hosts: leaf:spine
  become: true
  tasks:
    - include: ../../playbooks/get_goes_status.yml
